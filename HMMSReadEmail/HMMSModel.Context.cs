//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HMMSReadEmail
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Security.Cryptography;
    using System.IO;
    using System.Text;

    public partial class HMMSEntitiesDB : DbContext
    {
        public HMMSEntitiesDB()
            : base("name=HMMSEntitiesDB")
        {
            string conString = Database.Connection.ConnectionString;
            string[] conArray = conString.Split(';');
            string conPassword = conArray[4].Substring(conArray[4].IndexOf("=") + 1);
            byte[] Key = Encoding.ASCII.GetBytes("AECOM_HMMC_HMMS1");
            byte[] IV = Encoding.ASCII.GetBytes("AECOM_HMMC_HMMS1");
            //string encrypted = Encrypt("Pencil$1492", Key, IV);
            string DecodeAndDecrypt = Decrypt(Convert.FromBase64String(conPassword), Key, IV);
            Database.Connection.ConnectionString = conString.Replace(conPassword, DecodeAndDecrypt);
        }
        static string Encrypt(string plainText, byte[] Key, byte[] IV)
        {
            string encrypted;
            // Create a new AesManaged.    
            using (AesManaged aes = new AesManaged())
            {
                // Create encryptor    
                ICryptoTransform encryptor = aes.CreateEncryptor(Key, IV);
                // Create MemoryStream    
                using (MemoryStream ms = new MemoryStream())
                {
                    // Create crypto stream using the CryptoStream class. This class is the key to encryption    
                    // and encrypts and decrypts data from any given stream. In this case, we will pass a memory stream    
                    // to encrypt    
                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    {
                        // Create StreamWriter and write data to a stream    
                        using (StreamWriter sw = new StreamWriter(cs))
                            sw.Write(plainText);
                        encrypted = Convert.ToBase64String(ms.ToArray());
                    }
                }
            }
            // Return encrypted data    
            return encrypted;
        }
        static string Decrypt(byte[] cipherText, byte[] Key, byte[] IV)
        {
            string plaintext = null;
            // Create AesManaged    
            using (AesManaged aes = new AesManaged())
            {
                // Create a decryptor    
                ICryptoTransform decryptor = aes.CreateDecryptor(Key, IV);
                // Create the streams used for decryption.    
                using (MemoryStream ms = new MemoryStream(cipherText))
                {
                    // Create crypto stream    
                    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                    {
                        // Read crypto stream    
                        using (StreamReader reader = new StreamReader(cs))
                            plaintext = reader.ReadToEnd();
                    }
                }
            }
            return plaintext;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AUL> AULs { get; set; }
        public virtual DbSet<INV> INVs { get; set; }
        public virtual DbSet<ISU> ISUs { get; set; }
        public virtual DbSet<MXQ> MXQs { get; set; }
        public virtual DbSet<NOP> NOPs { get; set; }
        public virtual DbSet<ORD> ORDs { get; set; }
        public virtual DbSet<QOH> QOHs { get; set; }
        public virtual DbSet<TRN> TRNs { get; set; }
        public virtual DbSet<LOG> LOGs { get; set; }
    
        public virtual int AULCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AULCopytoHistory");
        }
    
        public virtual int INVCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INVCopytoHistory");
        }
    
        public virtual int ISUCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ISUCopytoHistory");
        }
    
        public virtual int MXQCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MXQCopytoHistory");
        }
    
        public virtual int NOPCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NOPCopytoHistory");
        }
    
        public virtual int ORDCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ORDCopytoHistory");
        }
    
        public virtual int QOHCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QOHCopytoHistory");
        }
    
        public virtual int TRNCopytoHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRNCopytoHistory");
        }
    }
}
